.IGNORE:

SHELL = /bin/sh

# PATHS
prefix = @prefix@
srcdir = @srcdir@
bindir = $(prefix)/bin
includedir = $(prefix)/include
libdir = $(prefix)/lib

# Libraries
LIBS =  @BBH_RNPLBLD_CLIBS@

# Headers to be exported
EXPORT_HEADERS = bbhutil.h cliser.h librnpl.h sdf.h sdf_priv.h

# Programs
CTOF = mfi
LEX = @LEX@
YACC = @YACC@
PERL = @PERL@
RPCGEN = @RPCGEN@
RANLIB = @RANLIB@
AR = @AR@
CC = @CC@
F77 = @F77@

# Compiler Options
LDFLAGS = -L../lib @LDFLAGS@ @BBH_RNPLAPP_LPATHS@
CFLAGS = -c @CFLAGS@ 
CFLAGS_NOOPT = -c @CFLAGS_NOOPT@ 
CPPFLAGS = -I../include @BBH_RNPLAPP_CINC@ @CPPFLAGS@ @DEFS@ @BBH_DEFS@

F77FLAGS = @F77FLAGS@

# System type for mfi
BBH_SYSTEM=@BBH_SYSTEM@

# Compiler Commands

# Previous approach to optimization supression 
# CC_CMP_NO_OPT = $(CC) $(CFLAGS) -g $(CPPFLAGS)
# is broken since CFLAGS was frequently set prior to configuration, 
# and often contained an optimization switch which apparently overrides
# the debug flag.  With luck, removing CFLAGS will be somewhat less broken. 
# With "current" (as of May 04) generation of GCC, sdf.c needs to be 
# compiled sans optimization to avoid junk in time field of records
CC_CMP = $(CC) $(CFLAGS) $(COPT) $(CPPFLAGS)
CC_CMP_NO_OPT = $(CC) $(CFLAGS_NOOPT) -g $(CPPFLAGS)
CC_LNK = $(CC) $(LDFLAGS) 
CC_PRE = $(CC) -E $(CPPFLAGS) 

F77_CMP = $(F77) -c $(F77FLAGS)
F77_LNK = $(F77) $(LDFLAGS)

install: all
	if test ! -d $(prefix); then\
		mkdir $(prefix);\
	fi
	if test ! -d $(bindir); then\
		mkdir $(bindir);\
	fi
	if test ! -d $(includedir); then\
		mkdir $(includedir);\
	fi
	if test ! -d $(libdir); then\
		mkdir $(libdir);\
	fi
	cp ../bin/rnpl $(bindir)
	cp ../lib/librnpl.a $(libdir)
	(cd $(libdir); $(RANLIB) librnpl.a)
	cp ../lib/libbbhutil.a $(libdir)
	(cd $(libdir); $(RANLIB) libbbhutil.a)
	cp ../include/* $(includedir)

all: headers librnpl.a libbbhutil.a rnpl

headers: $(EXPORT_HEADERS)
	cp $(EXPORT_HEADERS) ../include
	touch headers

.c.o:
	$(CC_CMP) -c $*.c

.f.o:
	$(F77_CMP) -c $*.f

Tpart: Tpart.o libbbhutil.a
	$(CC_LNK) -o Tpart Tpart.o -L. -lbbhutil -lm

tpart: tpart.o libbbhutil.a
	$(F77_LNK) -o tpart tpart.o -L. -lp410f -lbbhutil -lm

clean:
	rm *.o *.i *.tab.c lex.*.c *.tab.h librnpl_f.c bbhutil_f.c sdf_f.c > /dev/null 2>&1
	rm ../lib/librnpl.a > /dev/null 2>&1
	rm ../lib/libbbhutil.a > /dev/null 2>&1
	rm ../bin/rnpl > /dev/null 2>&1
	/bin/rm -rf *.cache > /dev/null 2>&1
	rm config.cache config.log config.status > /dev/null 2>&1
	/bin/rm work.pc work.pcl > /dev/null 2>&1
	rm Makefile > /dev/null 2>&1
	rm core.* > /dev/null 2>&1
	rm *.sdf > /dev/null 2>&1
	rm tpart Tpart > /dev/null 2>&1
	rm headers > /dev/null 2>&1
	
rnpl: rnpl.tab.o lex.rnpl.o rnpl_sup.o genf77extern.o
	$(CC_LNK) -o rnpl rnpl.tab.o lex.rnpl.o rnpl_sup.o genf77extern.o $(LIBS)
	mv rnpl ../bin 

rnpl.tab.o: rnpl.tab.c
	$(CC_CMP_NO_OPT) rnpl.tab.c

lex.rnpl.o: lex.rnpl.c
	$(CC_CMP) lex.rnpl.c

genf77extern.o: genf77extern.c
	$(CC_CMP) genf77extern.c
	
rnpl_sup.o: rnpl_sup.c rnpl.h
	$(CC_CMP_NO_OPT) rnpl_sup.c

rnpl.tab.c : rnpl.y rnpl.h
	$(YACC) -b rnpl -p rnpl -d rnpl.y

lex.rnpl.c: rnpl.l rnpl.h
	$(LEX) -Prnpl rnpl.l

bbhutil.o: bbhutil.c
	$(CC_CMP) bbhutil.c
	
bbhutil_f.i: bbhutil_f.h
	@/bin/cp bbhutil_f.h .bbhutil_f.c
	$(CC_PRE) .bbhutil_f.c > bbhutil_f.i
	@/bin/rm .bbhutil_f.c
	
bbhutil_f.c: bbhutil_f.i
	$(PERL) $(CTOF) bbhutil_f.i bbhutil_f.c $(BBH_SYSTEM) bbhutil
	
bbhutil_f.o: bbhutil_f.c
	$(CC_CMP) bbhutil_f.c

sdf_f.i: sdf_f.h
	@/bin/cp sdf_f.h .sdf_f.c
	$(CC_PRE) .sdf_f.c > sdf_f.i
	@/bin/rm .sdf_f.c
 
sdf_f.c: sdf_f.i
	$(PERL) $(CTOF) sdf_f.i sdf_f.c $(BBH_SYSTEM) sdf 

sdf_f.o: sdf_f.c
	$(CC_CMP) sdf_f.c
	
sdf.o: sdf.c
	$(CC_CMP_NO_OPT) sdf.c
	
cliser.o: cliser.c 
	$(CC_CMP) cliser.c

gpar.tab.c: gpar.y gpar.h
	$(YACC) -b gpar -p gpar -d gpar.y
		
gpar.tab.o: gpar.tab.c
	$(CC_CMP) gpar.tab.c
	
lex.gpar.o: lex.gpar.c
	$(CC_CMP) lex.gpar.c
	
lex.gpar.c: gpar.l gpar.h
	$(LEX) -Pgpar gpar.l
	
LIBBBHIO_OBJS = cliser.o sdf.o sdf_f.o gpar.tab.o lex.gpar.o
LIBBBHUTIL_OBJS = bbhutil.o bbhutil_f.o $(LIBBBHIO_OBJS)
libbbhutil.a: $(LIBBBHUTIL_OBJS)
	$(AR) r libbbhutil.a $(LIBBBHUTIL_OBJS)
	mv libbbhutil.a ../lib
	$(RANLIB) ../lib/libbbhutil.a

librnpl.o: librnpl.c
	$(CC_CMP_NO_OPT) librnpl.c

librnpl_f.i: librnpl_f.h
	@/bin/cp librnpl_f.h .librnpl_f.c
	$(CC_PRE) .librnpl_f.c > librnpl_f.i
	@/bin/rm .librnpl_f.c
	
librnpl_f.c: librnpl_f.i
	$(PERL) $(CTOF) librnpl_f.i librnpl_f.c $(BBH_SYSTEM) rnpl
	
librnpl_f.o: librnpl_f.c
	$(CC_CMP) librnpl_f.c
	
librnplf77.o: librnplf77.f
	$(F77_CMP) librnplf77.f

LIBRNPL_OBJS = bbhutil.o bbhutil_f.o librnpl.o librnpl_f.o librnplf77.o \
               $(LIBBBHIO_OBJS)
librnpl.a: $(LIBRNPL_OBJS)
	$(AR) r librnpl.a $(LIBRNPL_OBJS)
	mv librnpl.a ../lib
	$(RANLIB) ../lib/librnpl.a

