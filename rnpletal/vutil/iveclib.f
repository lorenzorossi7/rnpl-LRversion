c---------------------------------------------------------------------
c
c              I N T E G E R     V E C T O R
c
c                    O P E R A T I O N S
c
c---------------------------------------------------------------------
c
c
c---------------------------------------------------------------------
c
c     Vector-vector multiply.
c
c---------------------------------------------------------------------
c
      subroutine ivvm(v1,v2,v3,n)
c
         integer     v1(1), v2(1), v3(1)
         integer     i, n
c
         do 10 i = 1 , n
            v3(i) = v1(i) * v2(i)
 10      continue
c
         return
c
      end
c
c---------------------------------------------------------------------
c
c     Vector-vector divide.
c
c---------------------------------------------------------------------
c
      subroutine ivvd(v1,v2,v3,n)
c
         integer     v1(1), v2(1), v3(1)
         integer     i, n
c
         do 10 i = 1 , n
            v3(i) = v1(i) / v2(i)
 10      continue
c
         return
c
      end
c
c---------------------------------------------------------------------
c
c     Vector-vector add.
c
c---------------------------------------------------------------------
c
      subroutine ivva(v1,v2,v3,n)
c
         integer     v1(1), v2(1), v3(1)
         integer     i, n
c
         do 10 i = 1 , n
            v3(i) = v1(i) + v2(i)
 10      continue
c
         return
c
      end
c
c---------------------------------------------------------------------
c
c     Vector-vector subtract.
c
c---------------------------------------------------------------------
c
      subroutine ivvs(v1,v2,v3,n)
c
         integer     v1(1), v2(1), v3(1)
         integer     i, n
c
         do 10 i = 1 , n
            v3(i) = v1(i) - v2(i)
 10      continue
c
         return
c
      end
c
c---------------------------------------------------------------------
c
c     Vector-scalar multiply
c
c---------------------------------------------------------------------
c
      subroutine ivsm(v1,s1,v2,n)
c
         integer     v1(1), v2(1)
         integer     s1
         integer     i, n
c
         do 10 i = 1 , n
            v2(i) = s1 * v1(i)
 10      continue
c
         return
c
      end
c
c---------------------------------------------------------------------
c
c     Vector-scalar add.
c
c---------------------------------------------------------------------
c
      subroutine ivsa(v1,s1,v2,n)
c
         integer     v1(1), v2(1)
         integer     s1
         integer     i, n
c
         do 10 i = 1 , n
            v2(i) = v1(i) + s1
 10      continue
c
         return
c
      end
c
c---------------------------------------------------------------------
c
c     Load vector with scalar.
c
c---------------------------------------------------------------------
c
      subroutine ivls(v1,s1,n)
c
         integer     v1(1)
         integer     s1
         integer     i, n
c
         do 10 i = 1 , n
            v1(i) = s1
 10      continue
c
         return
c
      end
c
c---------------------------------------------------------------------
c
c     Vector negate.
c
c---------------------------------------------------------------------
c
      subroutine ivneg(v1,v2,n)
c
         integer     v1(1), v2(1)
         integer     i, n
c
         do 10 i = 1 , n
            v2(i) = -v1(i)
 10      continue
c
         return
c
      end
c
c---------------------------------------------------------------------
c
c     Vector minimum.
c
c---------------------------------------------------------------------
c
      integer function ivmin(v1,n)
c
         integer     min0
         integer     v1(1)
         integer     i, n
c
         ivmin = v1(1)
         do 10 i = 2 , n
            ivmin = min0(ivmin,v1(i))
 10      continue
c
         return
c
      end
c
c---------------------------------------------------------------------
c
c     Vector maximum.
c
c---------------------------------------------------------------------
c
      integer function ivmax(v1,n)
c
         integer     max0
         integer     v1(1)
         integer     i, n
c
         ivmax = v1(1)
         do 10 i = 2 , n
            ivmax = max0(ivmax,v1(i))
 10      continue
c
         return
c
      end
c
c---------------------------------------------------------------------
c
c     Vector function application.
c
c---------------------------------------------------------------------
c
      subroutine ivfapl(v1,v2,f,n)
c
         external    f
c
         integer     f
         integer     v1(1), v2(1)
         integer     i, n
c
         do 10 i = 1 , n
            v2(i) = f(v1(i))
 10      continue
c
         return
c
      end
c
c---------------------------------------------------------------------
c
c     Initializes V to ramp function - origin V0, increment VINC.
c
c---------------------------------------------------------------------
c
      subroutine ivramp(v,v0,vinc,n)
c
         integer     v(1)
         integer     v0, vinc
         integer     i, n
c
         v(1) = v0
         do 10 i = 2 , n
            v(i) = v(i-1) + vinc
 10      continue
c
         return
c
      end
c
c---------------------------------------------------------------------
c
c     Same as IVRAMP except with index increment.
c
c---------------------------------------------------------------------
c
      subroutine ivrmp2(v,v0,vinc,step,n)
c
         integer     v(1)
         integer     n, step, v0, vinc
         integer     i, j
c
         v(1) = v0
         i = step + 1
         do 10 j = 2 , n
            v(i) = v(i-step) + vinc
            i = i + step
 10      continue
c
         return
c
      end
c
c---------------------------------------------------------------------
c
c     Vector copy.
c
c---------------------------------------------------------------------
c
      subroutine ivcopy(v1,v2,n)
c
         integer     v1(1), v2(1)
         integer i, n
c
         do 10 i = 1 , n
            v2(i) = v1(i)
 10      continue
c
         return
c
      end
c
c---------------------------------------------------------------------
c
c     Vector reversal.
c
c---------------------------------------------------------------------
c
      subroutine ivrev(v1,v2,n)
c
         integer     v1(1), v2(1)
         integer     i, n
c
         do 10 i = 1 , n
            v2(i) = v1(n-i+1)
 10      continue
c
         return
c
      end
c
c---------------------------------------------------------------------
c
c     Counts occurences of S in V.
c
c---------------------------------------------------------------------
c
      integer function ivcnts(v,s,n)
c
         integer     v(1)
         integer     i, n, s
c
         ivcnts = 0
         do 10 i = 1 , n
            if( v(i) .eq. s ) ivcnts = ivcnts + 1
 10      continue
c
         return
c
      end
c
c---------------------------------------------------------------------
c
c     Predicate: V is zero array.
c
c---------------------------------------------------------------------
c
      logical function pivza(v,n)
c
         integer     ivcnts
         integer     v(1)
         integer     n
c
         pivza = ivcnts(v,0,n) .eq. n
c
         return
c
      end
c
c---------------------------------------------------------------------
c
c     Vector sum.
c
c---------------------------------------------------------------------
c
      integer function ivsum(v,n)
c
         integer     v(1)
         integer     i, n
c
         ivsum = v(1)
         do 10 i = 2 , n
            ivsum = ivsum + v(i)
 10      continue
c
         return
c
      end
c
c---------------------------------------------------------------------
c
c     Returns index of first occurence of KEY in first N elements of
c     V, or 0 if not found.
c
c---------------------------------------------------------------------
c
      integer function ivindx(v,n,key)
c
         integer     v(1)
         integer     i, key, n
c
         ivindx = 0
         if( n .gt. 0 ) then
            do 10 i = 1 , n
               if( v(i) .eq. key ) go to 20
 10         continue
         end if
c
         return
c
 20      ivindx = i
c
         return
c
      end
c
c-----------------------------------------------------------------------
c
c     Dumps V on UNIT.
c
c-----------------------------------------------------------------------
c
      subroutine ivdump(v,n,label,unit)
c
         implicit       logical*1 (a-z)
c
         integer        n,   unit
c
         integer        v(1)
c
         character*(*)  label
c
         integer        i,   st
c
         if( n .ge. 1 ) then
            write(unit,100) label
 100        FORMAT(/' <<< ',A,' >>>'/)
            st = 1
 110        continue
               write(unit,120) ( v(i) , i = st , min(st+5,n))
 120           FORMAT(' ',6I12)
               st = st + 6
            if( st .le. n ) go to 110
         end if
c
         return
c
      end
c
c-----------------------------------------------------------------------
c
c     Dumps V2 "as function" of V1 on UNIT.
c
c-----------------------------------------------------------------------
c
      subroutine ivpdmp(v1,v2,n,label,unit)
c
         integer          n,   unit
         real*8           v1(n)
         integer          v2(n)
         character*(*)    label
c
         integer          i,    st
c
         if( n .ge. 1 ) then
            write(unit,100) label
 100        FORMAT(//' <<< ',A,' >>>'/)
            st = 1
 110        continue
               if( st + 1 .le. n ) then
                  write(unit,120) ( v1(i), v2(i) , i = st , st + 1)
 120              FORMAT(T2, '(',F10.5,' :',I12,')',
     *                   T40,'(',F10.5,' :',I12,')')
                  st = st + 2
               else
                  write(unit,130) v1(n), v2(n)
 130              FORMAT(T2, '(',F10.5,' :',I12,')')
                  st = st + 1
               end if
            if( st .le. n ) go to 110
         end if
c
         return
c
      end
c
c-----------------------------------------------------------------------
c
c     EXTENSION OF IVDUMP WHICH DOES THE OBVIOUS THING.
c
c-----------------------------------------------------------------------
c
      subroutine ivdmp1(v,w,inc,n,label,unit)
c
         integer        v(1), w(1)
         character*(*)  label
         integer        inc, n, unit
c
         call ivinj(v,w,inc,n)
         call ivdump(w,1+(n-1)/inc,label,unit)
c
         return
c
      end
c
c---------------------------------------------------------------------
c
C     Injects every INC'th element of V1 into V2.
c
c---------------------------------------------------------------------
c
      subroutine ivinj(v1,v2,inc,n)
c
         integer     v1(1), v2(1)
         integer     i, inc, j, n
c
         j = 1
         do 10 i = 1 , n , inc
            v2(j) = v1(i)
            j = j + 1
 10      continue
c
         return
c
      end

c---------------------------------------------------------------------
c
c     Simple vector read and writes ...
c
c---------------------------------------------------------------------

      subroutine ivwri1(v,n,unit)

         implicit       none

         integer        n
         integer        v(n)
         integer        unit

         integer        j

         do 10 j = 1 , n
            write(unit,1000) v(j)
1000        format(i8)
 10      continue 

         return

      end

      subroutine ivrea1(v,n,unit)

         implicit       none

         integer        n
         integer        v(n)
         integer        unit

         n = 0
 100     continue
            read(unit,*,end=200,err=99) v(n+1)
            n = n + 1
         go to 100
 200     return
      
 99      continue
            write(0,*) '<<< ivprea:: read error. >>>'
         return

      end

c-----------------------------------------------------------------------
c
c     Computes prime decomposition of num > 1 and returns vector, number 
c     of factors in vfact, nfact ... calling routine responsible for 
c     ensuring that vfact is roomy enough.  Returns number of factors 
c     found or < 0 for error condition.
c
c     Error codes:
c
c     -1:   num < 0
c     -2:   num too large (> (biggest stored prime)^2)
c
c
c-----------------------------------------------------------------------

      integer function ivprimedecomp(num,vfact,nfact)

         implicit       none

         integer        num,       vfact(*),    nfact

         integer        nprime
         parameter    ( nprime =  980 )

         integer        lnum,      iprime
         integer        prime(nprime)

         data   prime /
     *               2, 3, 5, 7, 11, 13, 17, 19, 23, 29,
     *             31, 37, 41, 43, 47, 53, 59, 61, 67, 71,
     *           73, 79, 83, 89, 97, 101, 103, 107, 109, 113,
     *        127, 131, 137, 139, 149, 151, 157, 163, 167, 173,
     *        179, 181, 191, 193, 197, 199, 211, 223, 227, 229,
     *        233, 239, 241, 251, 257, 263, 269, 271, 277, 281,
     *        283, 293, 307, 311, 313, 317, 331, 337, 347, 349,
     *        353, 359, 367, 373, 379, 383, 389, 397, 401, 409,
     *        419, 421, 431, 433, 439, 443, 449, 457, 461, 463,
     *        467, 479, 487, 491, 499, 503, 509, 521, 523, 541,
     *        547, 557, 563, 569, 571, 577, 587, 593, 599, 601,
     *        607, 613, 617, 619, 631, 641, 643, 647, 653, 659,
     *        661, 673, 677, 683, 691, 701, 709, 719, 727, 733,
     *        739, 743, 751, 757, 761, 769, 773, 787, 797, 809,
     *        811, 821, 823, 827, 829, 839, 853, 857, 859, 863,
     *        877, 881, 883, 887, 907, 911, 919, 929, 937, 941,
     *       947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013,
     *   1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069,
     *   1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151,
     *   1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223,
     *   1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291,
     *   1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373,
     *   1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451,
     *   1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511,
     *   1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583,
     *   1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657,
     *   1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733,
     *   1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811,
     *   1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889,
     *   1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987,
     *   1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053,
     *   2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129,
     *   2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213,
     *   2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287,
     *   2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357,
     *   2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423,
     *   2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531,
     *   2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617,
     *   2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687,
     *   2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741,
     *   2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819,
     *   2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903,
     *   2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999,
     *   3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079,
     *   3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181,
     *   3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257,
     *   3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331,
     *   3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413,
     *   3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511,
     *   3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571,
     *   3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643,
     *   3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727,
     *   3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821,
     *   3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907,
     *   3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989,
     *   4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057,
     *   4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139,
     *   4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231,
     *   4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297,
     *   4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409,
     *   4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493,
     *   4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583,
     *   4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657,
     *   4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751,
     *   4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831,
     *   4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937,
     *   4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003,
     *   5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087,
     *   5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179,
     *   5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279,
     *   5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387,
     *   5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443,
     *   5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521,
     *   5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639,
     *   5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693,
     *   5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791,
     *   5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857,
     *   5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939,
     *   5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053,
     *   6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133,
     *   6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221,
     *   6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301,
     *   6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367,
     *   6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473,
     *   6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571,
     *   6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673,
     *   6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761,
     *   6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833,
     *   6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917,
     *   6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997,
     *   7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103,
     *   7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207,
     *   7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297,
     *   7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411,
     *   7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499,
     *   7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561,
     *   7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643,
     *   7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723
     *                /

         if( num .lt. 2 ) then
            ivprimedecomp = -1
            return
         end if
         if( num .gt. prime(nprime) ** 2 ) then
            ivprimedecomp = -2
            return
         end if

         nfact = 0
         lnum = num
         do iprime = 1 , nprime 
100         continue
            if( mod(lnum,prime(iprime)) .eq. 0 ) then
               nfact = nfact + 1
               vfact(nfact) = prime(iprime)
               lnum = lnum / prime(iprime)
         if( lnum .eq. 1 ) goto 200
            goto 100
            end if
         end do
         nfact = nfact + 1
         vfact(nfact) = lnum
200      continue

         ivprimedecomp = nfact

         return

      end 

c-----------------------------------------------------------------------
c
c     Computes product of vector elements.
c
c-----------------------------------------------------------------------

      integer function ivprod(v,n)

         implicit      none

         integer       v(*),      n

         integer       i
         
         if( n .gt. 0 ) then
            ivprod = v(1)
            do i = 2 , n
               ivprod = ivprod * v(i)
            end do
         else 
            ivprod = 0
         end if

         return

      end 

c-----------------------------------------------------------------------
c
c     Computes integer first difference (not divided) ...
c
c-----------------------------------------------------------------------

      subroutine ivdiff1(v1,v2,n)

         implicit   none
         integer    n
         integer    v1(n),      v2(n)

         integer    i

         if( n .gt. 1 ) then
            do i = 1 , n - 1
               v2(i) = v1(i+1) - v1(i)
            end do
         end if
      
         return

      end
